Domain: Cities
SameAs Berlin:
SELECT * WHERE {
 <http://dbpedia.org/resource/Berlin> owl:sameAs ?city
}


SameAs links of 10 million cities.

10 million of cities with sameAs links.

(1) All cities from DBpedia:
#28675 results
SELECT count(?s) WHERE {
 ?s a <http://dbpedia.org/ontology/City>
}

(2) All cities from DBpedia (sameAs links):
#727320 results
SELECT count(*) WHERE {
 ?s a <http://dbpedia.org/ontology/City> ; (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2
}

(3) Number of sameAs links of each city from DBpedia:
SELECT ?city (count(?city)-1) as ?numberSameAs WHERE {
 ?city a <http://dbpedia.org/ontology/City> ; (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2
} group by ?city

(4) SameAs links, cities, DBpedia to other datasets(including DBpedia sameAs DBpedia):
SELECT ?city owl:sameAs ?so2 WHERE {
 ?city a <http://dbpedia.org/ontology/City> ; (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2
} order by ?city

(5) SameAs links, cities, DBpedia to other datasets:
SELECT ?city owl:sameAs ?so2 WHERE {
 ?city a <http://dbpedia.org/ontology/City> ; (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2 .
 filter( !regex(str(?so2), "dbpedia" ))
} order by ?city

(6) List of resources(cities) from datasets, without duplicates (excluding DBpedia):
SELECT DISTINCT ?so2  
WHERE
  {
    ?city  a                          <http://dbpedia.org/ontology/City> ; 
           (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2 .
    FILTER ( !regex(str(?so2), "dbpedia" ) )
  } 
ORDER BY ?city

SELECT DISTINCT ?so2  
WHERE
  {
    ?city  a                          <http://dbpedia.org/ontology/City> ; 
           (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2 .
#    FILTER ( !regex(str(?so2), "dbpedia" ) )
  } 
ORDER BY ?city
#----------------------
SELECT DISTINCT ?so2  
WHERE
  {
    ?person  a                          <http://dbpedia.org/ontology/Person> ; 
           (<http://www.w3.org/2002/07/owl#sameAs>|^<http://www.w3.org/2002/07/owl#sameAs>)* ?so2 .
#    FILTER ( !regex(str(?so2), "dbpedia" ) )
  } 
ORDER BY ?person
#----------------------

select (count(?entity) as ?numberOfFilms) { ?entity rdf:type dbo:Film }

#ett	                                                        totalSameAs
#http://dbpedia.org/resource/List_of_minor_planets:_6001–7000	981
#http://dbpedia.org/resource/List_of_minor_planets:_5001–6000	946
#http://dbpedia.org/resource/List_of_minor_planets:_3001–4000	930
#DBpedia, the rank of entities with more sameAs links.
SELECT ?ett count(?obj) as ?totalSameAs
WHERE {
  #?ett <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?tp.
  #?tp <http://www.w3.org/2000/01/rdf-schema#subClassOf>* ?C.
  ?ett <http://www.w3.org/2002/07/owl#sameAs> ?obj .
  #filter(?ett=<http://dbpedia.org/resource/Leipzig>)
}
group by ?ett
order by DESC(?totalSameAs)

#DBpedia has more than 100 million types, we are just using City
SELECT DISTINCT count(?type)
WHERE {
  ?s a ?type.
#filter(?type=<http://dbpedia.org/ontology/City>)
}


#All properties (more complete with 107827 properties):
select distinct ?property where{
{
  ?property rdfs:domain ?class . 
  ?s rdfs:subClassOf+ ?class.
} UNION {
  ?property rdfs:domain ?s.
}
#FILTER(?property=<http://dbpedia.org/ontology/service>)
}

#or, all properties (only 2421 properties):
select distinct ?property where { 
   ?property <http://www.w3.org/2000/01/rdf-schema#domain> 
                             ?o . }



#-------------------------------------------------------
# Obtain the label of a given class (:class1).
SELECT DISTINCT ?c (STR(?l) AS ?lb)
    WHERE {
      ?c a :class1 ;
        <http://www.w3.org/2000/01/rdf-schema#label> ?l .
    }

# Obtain a list of classes.
SELECT DISTINCT ?c
    WHERE {
      GRAPH :graph
        {[] a ?c .}
    }

# Count instances belonging to a given class (:class1).
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph
        {?s a :class1 .}
    }

# Enumerate classes linked from a given class (:class1) and predicates that link instances of the given class and the target classes.
# below q1 to q3 are indentical to each other (I think)
### q1
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 .
  ?t a ?c .
  ?f ?p ?t .
  FILTER(?c != owl:Class)
} GROUP BY ?p ?c
### q2
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 ;
     ?p [ a ?c ].
FILTER(!sameTerm(?c, owl:Class))
} GROUP BY ?p ?c
### q3
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 ;
     ?p ?t ;
     !rdf:type ?t .
  ?t a ?c .
} GROUP BY ?p ?c

# Enumerate all the predicates with their counts under the condition that their subject and object belong to :c1 and :c2, respectively.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        ?o a :c2 .
      }}
  GROUP BY ?p

# Count triples whose subject and object belong to :c1 and a locally-undeclared class, respectively.
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        MINUS {?o a ?oc}
	  FILTER(!isLiteral(?o) && ?p != rdf:type)
      }}

# Enumerate all the predicates with their counts under the condition that their subject and object belong to :c1 and a locally-undeclared class, respectively.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        MINUS {?o a ?oc}
        FILTER(!isLiteral(?o) && ?p != rdf:type)
      }}
  GROUP BY ?p

# Count triples whose subject belongs to :c1 and whose object is literal.
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        FILTER(isLiteral(?o))
      }}

# Enumerate all the predicates with their counts under the condition that their subject belongs to :c1 and their object is literal.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        FILTER(isLiteral(?o))
      }}
GROUP BY ?p
